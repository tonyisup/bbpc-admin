import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { useState } from "react";
import { Episode } from "@prisma/client";

const Home: NextPage = () => {
  const [episodes, setEpisodes] = useState<Episode[]>([]);
  const [episodeNumber, setEpisodeNumber] = useState<number>(0);
  const [episodeTitle, setEpisodeTitle] = useState<string>('');
  const { mutate: addEpisode } = trpc.episode.add.useMutation({ 
    onSuccess: (newEpisode) => {
      setEpisodes((prev) => [...prev, newEpisode]);
    }
  });
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center  bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="flex justify-between">
          <h2 className="text-2xl font-semibold">Episodes</h2>
          <input
            type="number"
            value={episodeNumber}
            onChange={(e) => setEpisodeNumber(e.target.valueAsNumber)}
          />
          <input
            type="text"
            value={episodeTitle}
            onChange={(e) => setEpisodeTitle(e.target.value)}
          />
          <button
            type="button" 
            onClick={() => addEpisode({ number: episodeNumber, title: episodeTitle})}
            className="bg-violet-500 text-white text-sm p-2 rounded-md transition hover:bg-violet-200">
            Add Episode
          </button>
        </div>
        <ul className="mt-4">
          {episodes.map((episode) => (
            <li key={episode.id} className="flex justify-between items-center">
              <span>{episode.number}</span>
              <span>{episode.title}</span>
            </li>
          ))}
        </ul>
      </main>
    </>
  );
};

export default Home;

// const AuthShowcase: React.FC = () => {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined },
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => signOut() : () => signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// };

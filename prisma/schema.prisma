generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Episode {
  id          String        @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  number      Int           @db.SmallInt
  title       String
  recording   String?
  date        DateTime?     @db.Date
  description String?
  assignments Assignment[]
  bangers     Banger[]
  extras      ExtraReview[]
  links       Link[]
  shows       Show[]
}

model Link {
  id        String   @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  url       String
  text      String
  episodeId String?  @db.UniqueIdentifier
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
}

model Movie {
  id          String       @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  title       String
  year        Int          @db.SmallInt
  poster      String?
  url         String
  assignments Assignment[]
  reviews     Review[]
}

model Show {
  id        String   @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  title     String
  year      Int      @db.SmallInt
  poster    String?
  url       String
  episodeId String?  @db.UniqueIdentifier
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
}

model Rating {
  id       String   @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  name     String
  value    Int      @db.TinyInt
  sound    String?
  icon     String?
  category String?
  guesses  Guess[]
  reviews  Review[]
}

model Review {
  id                String             @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  userId            String
  movieId           String             @db.UniqueIdentifier
  ratingId          String?            @db.UniqueIdentifier
  assignmentReviews AssignmentReview[]
  extraReviews      ExtraReview[]
  Movie             Movie              @relation(fields: [movieId], references: [id], onDelete: Cascade)
  Rating            Rating?            @relation(fields: [ratingId], references: [id])
  User              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExtraReview {
  id        String  @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  reviewId  String  @db.UniqueIdentifier
  episodeId String  @db.UniqueIdentifier
  Episode   Episode @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  Review    Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model AssignmentReview {
  id           String     @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  assignmentId String     @db.UniqueIdentifier
  reviewId     String     @db.UniqueIdentifier
  Assignment   Assignment @relation(fields: [assignmentId], references: [id], onUpdate: NoAction)
  Review       Review     @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  guesses      Guess[]
}

model Assignment {
  id                String             @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  userId            String
  episodeId         String             @db.UniqueIdentifier
  movieId           String             @db.UniqueIdentifier
  homework          Boolean
  Episode           Episode            @relation(fields: [episodeId], references: [id])
  Movie             Movie              @relation(fields: [movieId], references: [id])
  User              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignmentReviews AssignmentReview[]
}

model Banger {
  id        String   @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  title     String
  artist    String
  url       String
  episodeId String?  @db.UniqueIdentifier
  userId    String?
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])
}

model Role {
  id          Int        @id @default(autoincrement()) @db.TinyInt
  name        String
  description String
  admin       Boolean    @default(false)
  users       UserRole[]
}

model UserRole {
  id     String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  userId String
  roleId Int    @db.TinyInt
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  assignments   Assignment[]
  bangers       Banger[]
  guesses       Guess[]
  reviews       Review[]
  sessions      Session[]
  roles         UserRole[]
}

model Guess {
  id                String           @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  created           DateTime         @db.DateTime
  points            Int
  assignmntReviewId String           @db.UniqueIdentifier
  AssignmentReview  AssignmentReview @relation(fields: [assignmntReviewId], references: [id], onUpdate: NoAction)
  ratingId          String           @db.UniqueIdentifier
  Rating            Rating           @relation(fields: [ratingId], references: [id], onUpdate: NoAction)
  userId            String
  User              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  seasonId          String           @db.UniqueIdentifier
  Season            Season           @relation(fields: [seasonId], references: [id], onDelete: Cascade)
}

model Game {
  id String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
}

model Season {
  id          String   @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  title       String
  description String?
  gameTypeId  Int      @db.TinyInt
  gameType    GameType @relation(fields: [gameTypeId], references: [id], onDelete: Cascade)
  guesses     Guess[]
}

model GameType {
  id          Int      @id @default(autoincrement()) @db.TinyInt
  title       String
  description String?
  seasons     Season[]
}

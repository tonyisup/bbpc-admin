// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// bbpc - episodes
model Episode {
  id          String       @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  number      Int          @db.SmallInt
  title       String
  recording   String?
  reviews     Review[]
  shows       Show[]
  bangers     Banger[]
  assignments Assignment[]
}

model Movie {
  id          String       @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  title       String
  year        Int          @db.SmallInt
  poster      String?
  reviews     Review[]
  url         String
  assignments Assignment[]
}

model Show {
  id        String   @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  title     String
  year      Int      @db.SmallInt
  poster    String?
  url       String
  episodeId String?  @db.UniqueIdentifier
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
}

model Rating {
  id       String   @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  name     String
  value    Int      @db.TinyInt
  category String?
  sound    String?
  icon     String?
  reviews  Review[]
}

model Review {
  id           String      @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  userId       String
  movieId      String      @db.UniqueIdentifier
  episodeId    String      @db.UniqueIdentifier
  ratingId     String?     @db.UniqueIdentifier
  assignmentId String?     @db.UniqueIdentifier
  User         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie        Movie       @relation(fields: [movieId], references: [id], onDelete: Cascade)
  Episode      Episode     @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  Rating       Rating?     @relation(fields: [ratingId], references: [id], onDelete: SetNull)
  Assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Assignment {
  id        String   @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  reviews   Review[]
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Movie     Movie?   @relation(fields: [movieId], references: [id])
  movieId   String?  @db.UniqueIdentifier
  Episode   Episode? @relation(fields: [episodeId], references: [id])
  episodeId String?  @db.UniqueIdentifier
}

model Banger {
  id        String   @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  title     String
  artist    String
  url       String
  episodeId String?  @db.UniqueIdentifier
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

// authorization 

model Role {
  id          Int        @id @default(autoincrement()) @db.TinyInt
  name        String
  description String
  users       UserRole[]
}

model UserRole {
  id     String @id @default(dbgenerated("newid()")) @db.UniqueIdentifier
  userId String
  roleId Int    @db.TinyInt
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         UserRole[]
  reviews       Review[]
  assignments   Assignment[]
  bangers       Banger[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
